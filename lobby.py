import os
import random
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}


def register_lobby_handler(bot):
    @bot.message_handler(func=lambda message: message.text == "üè† –õ–æ–±–±–∏")
    def show_lobby(message):
        create_lobby_menu(bot, message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã"
    @bot.callback_query_handler(func=lambda call: call.data == "open_games")
    def show_open_games(call):
        open_games = read_games_from_file("games.txt")

        if not open_games:
            bot.send_message(
                call.message.chat.id,
                "üîç **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!**",
                parse_mode="Markdown"
            )
        else:
            for game in open_games:
                if game["status"] == "waiting":
                    markup = InlineKeyboardMarkup()
                    join_button = InlineKeyboardButton(
                        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({game['amount']} USDT)",
                        callback_data=f"join_game_{game['id']}"  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ID –∏–≥—Ä—ã –∫ –∫–Ω–æ–ø–∫–µ
                    )
                    markup.add(join_button)

                    bot.send_message(
                        call.message.chat.id,
                        f"üïπÔ∏è **–ò–≥—Ä–∞:** {game['game']}\n"
                        f"üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {game['username']} (ID: {game['user_id']})\n"
                        f"üíµ **–°—É–º–º–∞ —É—á–∞—Å—Ç–∏—è:** {game['amount']} USDT\n",
                        reply_markup=markup,
                        parse_mode="Markdown"
                    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
    @bot.callback_query_handler(func=lambda call: call.data.startswith("join_game_"))
    def join_game(call):
        open_games = read_games_from_file("games.txt")
        game_id = int(call.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä—ã –∏–∑ callback_data

        # –ò—â–µ–º –∏–≥—Ä—É –ø–æ ID
        selected_game = next((game for game in open_games if game["id"] == game_id), None)
        if not selected_game or selected_game["status"] != "waiting":
            bot.answer_callback_query(call.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–∞: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
        active_games[game_id] = {
            "creator_id": selected_game["user_id"],
            "opponent_id": call.from_user.id,
            "game": selected_game["game"],
            "emoji_moves": {},
            "score": {selected_game["user_id"]: 0, call.from_user.id: 0}  # –°—á—ë—Ç –∏–≥—Ä–æ–∫–æ–≤
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
        bot.send_message(
            call.message.chat.id,
            f"üéÆ –ò–≥—Ä–∞ '{selected_game['game']}' –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã: {selected_game['user_id']}\n"
            f"üë• –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.from_user.id}\n\n"
            "–ü–æ–±–µ–¥–∏—Ç —Ç–æ—Ç, –∫—Ç–æ –∑–∞–±—å—ë—Ç 10 –æ—á–∫–æ–≤ –ø–µ—Ä–≤—ã–º! –ö–∏–¥–∞–π—Ç–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ üèÄ –∏–ª–∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ!"
        )

        start_game(bot, game_id)


# –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∏ –æ–±—â–µ–Ω–∏—è
def start_game(bot, game_id):
    game = active_games[game_id]
    creator_id = game["creator_id"]
    opponent_id = game["opponent_id"]

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
    @bot.message_handler(func=lambda message: message.from_user.id in [creator_id, opponent_id])
    def handle_messages(message):
        player_id = message.from_user.id
        game = active_games.get(game_id)

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —ç—Ç—É –∏–≥—Ä—É
        if not game:
            return

        # –ë–∞—Å–∫–µ—Ç–±–æ–ª: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–∏–¥–∞–µ—Ç —Å–º–∞–π–ª üèÄ –∏–ª–∏ ü§æ‚Äç‚ôÇÔ∏è
        if message.text in ["üèÄ", "ü§æ‚Äç‚ôÇÔ∏è"]:
            handle_basketball_move(bot, message, game_id)
            return

        # –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
        opponent_id = game["creator_id"] if player_id == game["opponent_id"] else game["opponent_id"]
        bot.send_message(opponent_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\n\n{message.text}")


# –ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞
def handle_basketball_move(bot, message, game_id):
    game = active_games[game_id]
    player_id = message.from_user.id

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Å–¥–µ–ª–∞–ª —Ö–æ–¥ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫)
    if game["emoji_moves"].get(player_id):
        bot.send_message(player_id, "‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ! –ñ–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
        return

    # –ó–∞–ø–∏—Å–∞—Ç—å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
    game["emoji_moves"][player_id] = message.text
    bot.send_message(player_id, "‚úîÔ∏è –í–∞—à —Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω, –∂–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Ö–æ–¥
    if len(game["emoji_moves"]) == 2:
        process_round(bot, game_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
def process_round(bot, game_id):
    game = active_games[game_id]
    creator_id = game["creator_id"]
    opponent_id = game["opponent_id"]

    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º, –∫—Ç–æ –∑–∞–±–∏–ª –≥–æ–ª
    scorer = random.choice([creator_id, opponent_id])
    game["score"][scorer] += 1

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞–º
    bot.send_message(
        creator_id,
        f"üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞:\n"
        f"üèÄ –ü–æ–±–µ–¥–∏–ª: {'–°–æ–∑–¥–∞—Ç–µ–ª—å' if scorer == creator_id else '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫'}\n"
        f"–°—á—ë—Ç: {game['score'][creator_id]} : {game['score'][opponent_id]}"
    )
    bot.send_message(
        opponent_id,
        f"üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞:\n"
        f"üèÄ –ü–æ–±–µ–¥–∏–ª: {'–í—ã' if scorer == opponent_id else '–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫'}\n"
        f"–°—á—ë—Ç: {game['score'][creator_id]} : {game['score'][opponent_id]}"
    )

    # –û—á–∏—Å—Ç–∫–∞ —Ö–æ–¥–æ–≤
    game["emoji_moves"].clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    if game["score"][creator_id] >= 10 or game["score"][opponent_id] >= 10:
        end_game(bot, game_id)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
def end_game(bot, game_id):
    game = active_games[game_id]
    creator_id = game["creator_id"]
    opponent_id = game["opponent_id"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if game["score"][creator_id] > game["score"][opponent_id]:
        winner = creator_id
    else:
        winner = opponent_id

    # –°–æ–æ–±—â–∞–µ–º –∏–≥—Ä–æ–∫–∞–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    bot.send_message(
        creator_id,
        f"üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: "
        f"{game['score'][creator_id]}:{game['score'][opponent_id]}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–í—ã' if winner == creator_id else '–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫'}!"
    )
    bot.send_message(
        opponent_id,
        f"üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: "
        f"{game['score'][creator_id]}:{game['score'][opponent_id]}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–í—ã' if winner == opponent_id else '–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫'}!"
    )

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    del active_games[game_id]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–≥—Ä –∏–∑ —Ñ–∞–π–ª–∞
def read_games_from_file(filename):
    if not os.path.exists(filename):
        return []

    games = []
    with open(filename, "r", encoding="utf-8") as file:
        lines = file.readlines()
        for i, line in enumerate(lines, start=1):
            game_data = line.strip().split("|")
            if len(game_data) == 5:
                games.append({
                    "id": i,
                    "user_id": int(game_data[0]),
                    "username": game_data[1],
                    "game": game_data[2],
                    "status": game_data[3],
                    "amount": float(game_data[4])
                })
    return games


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ª–æ–±–±–∏
def create_lobby_menu(bot, message):
    markup = InlineKeyboardMarkup()
    btn_bowling = InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="select_game_bowling")
    btn_football = InlineKeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª", callback_data="select_game_football")
    btn_basketball = InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="select_game_basketball")
    open_games_button = InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã", callback_data="open_games")
    markup.add(btn_bowling, btn_football, btn_basketball)
    markup.add(open_games_button)

    bot.send_message(
        message.chat.id,
        "üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ–±–±–∏!**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:\n\n"
        "üé≥ –ë–æ—É–ª–∏–Ω–≥\n"
        "‚öΩÔ∏è –§—É—Ç–±–æ–ª\n"
        "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìÇ **–û—Ç–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã** –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∏–º!",
        reply_markup=markup,
        parse_mode="Markdown"
    )